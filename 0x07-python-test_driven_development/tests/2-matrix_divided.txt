#matrix_divided

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

#Test Case 1
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test Case 2
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

# Test Case 3
>>> matrix_divided([[1, 2], [3, 4], [5, 6]], 2)
[[0.5, 1.0], [1.5, 2.0], [2.5, 3.0]]

#Test Case 4
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'a')
Traceback (most recent call last):
	...
TypeError: div must be a number

# Test Case 5
>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

#Test Case 6
>>> matrix_divided('matrix', 2)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

#Test Case 7
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 1)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

# Test Case 8
>>> matrix_divided([[0, 0, 0], [0, 0, 0]], 3)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

# Test Case 9
>>> matrix_divided([[1.5, 2.5], [3.75, 4.25]], 0.5)
[[3.0, 5.0], [7.5, 8.5]]

#Test Case 10
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], -2)
[[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

#Test Case 11
>>> div = float('inf')
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], div)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

#Test Case 12
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], None)
Traceback (most recent call last):
	...
TypeError: missing arguments

#Test Case 13
>>> matrix_divided(None, 3)
Traceback (most recent call last):
	...
TypeError: missing arguments

#Test Case 14
>>> matrix_divided(None, None)
Traceback (most recent call last):
	...
TypeError: missing arguments

