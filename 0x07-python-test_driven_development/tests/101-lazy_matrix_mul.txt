#Matrix Multiplication using Numpy

>>> import numpy as np

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

# Test Case 1
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 7 10]
 [15 22]]

# Test Case 3
>>> m_a = "string"
>>> m_b = np.array([[1, 2], [3, 4]])
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: Scalar operands are not allowed, use '*' instead

# Test Case 4
>>> m_a = np.array([[1, 2], [3, 4]])
>>> m_b = [["string"], ["string"]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: Scalar operands are not allowed, use '*' instead

#Test Case 5
>>> m_a = [[]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Test Case 6
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

#Test Case 7
>>> m_a = [[5, 6], [4, "6"]]
>>> m_b = [[1, 2], [4, 5]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
TypeError: invalid data type for einsum

#Test Case 8
>>> m_a = [[1, 2], [4, 5]]
>>> m_b = [[1, "2"], [4, 5]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
TypeError: invalid data type for einsum

# Test Case 9
>>> m_a = [[1, 2, 3], [4, 5]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: setting an array element with a sequence

#Test Case 10
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2, 3], [4, 5]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: setting an array element with a sequence

# Test Case 8
>>> m_a = [[1, 2, 3], [4, 5, 6]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
	...
ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
